/* tslint:disable */
/* eslint-disable */
/**
 * Autify API
 * ## Authorization You can authenticate the API by using a personal access token and passing it to the Bearer header. To generate or manage API keys、please visit [your account page](https://app.autify.com/settings).  Example of using a personal access token in the header： ``` curl -H \"Authorization: Bearer YOUR_PERSONAL_ACCESS_TOKEN\" https://app.autify.com/api/v1/ ```  If the credentials are invalid or omitted, an error message is returned with status code 401： ``` {   \"errors\":[{     \"message\": \"Bad credentials\"   }] } ```  ## Overview Currently, we support the following APIs. For more details, open the toggle for each endpoint.  * Schedule: Request a test execution by specifying a test_plan ID. * Scenario: Get a list of scenarios. The detail of the scenario will be returned when a scenario ID is specified. * Result: Get a list of test results. The detail of the test result will be returned when a test result ID is specified. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Capability
 */
export interface Capability {
    /**
     * 
     * @type {number}
     * @memberof Capability
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Capability
     */
    os?: string;
    /**
     * 
     * @type {string}
     * @memberof Capability
     */
    os_version?: string;
    /**
     * 
     * @type {string}
     * @memberof Capability
     */
    browser?: string;
    /**
     * 
     * @type {string}
     * @memberof Capability
     */
    browser_version?: string;
    /**
     * 
     * @type {string}
     * @memberof Capability
     */
    device?: string;
    /**
     * 
     * @type {string}
     * @memberof Capability
     */
    resolution?: string;
    /**
     * 
     * @type {string}
     * @memberof Capability
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof Capability
     */
    updated_at?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    status?: InlineResponse200StatusEnum;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    duration?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    started_at?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    finished_at?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    updated_at?: string;
    /**
     * 
     * @type {Array<InlineResponse200TestPlanCapabilityResults>}
     * @memberof InlineResponse200
     */
    test_plan_capability_results?: Array<InlineResponse200TestPlanCapabilityResults>;
    /**
     * 
     * @type {InlineResponse200TestPlan}
     * @memberof InlineResponse200
     */
    test_plan?: InlineResponse200TestPlan;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200StatusEnum {
    Queuing = 'queuing',
    Waiting = 'waiting',
    Running = 'running',
    Passed = 'passed',
    Failed = 'failed',
    Skipped = 'skipped'
}

/**
 * 
 * @export
 * @interface InlineResponse200TestPlan
 */
export interface InlineResponse200TestPlan {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200TestPlan
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200TestPlan
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200TestPlan
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200TestPlan
     */
    updated_at?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200TestPlanCapabilityResults
 */
export interface InlineResponse200TestPlanCapabilityResults {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200TestPlanCapabilityResults
     */
    id?: number;
    /**
     * 
     * @type {Capability}
     * @memberof InlineResponse200TestPlanCapabilityResults
     */
    capability?: Capability;
    /**
     * 
     * @type {Array<TestCaseResult>}
     * @memberof InlineResponse200TestPlanCapabilityResults
     */
    test_case_results?: Array<TestCaseResult>;
}
/**
 * 
 * @export
 * @interface Story
 */
export interface Story {
    /**
     * 
     * @type {number}
     * @memberof Story
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    updated_at?: string;
}
/**
 * 
 * @export
 * @interface TestCaseResult
 */
export interface TestCaseResult {
    /**
     * 
     * @type {number}
     * @memberof TestCaseResult
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TestCaseResult
     */
    status?: TestCaseResultStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof TestCaseResult
     */
    duration?: number;
    /**
     * 
     * @type {string}
     * @memberof TestCaseResult
     */
    started_at?: string;
    /**
     * 
     * @type {string}
     * @memberof TestCaseResult
     */
    finished_at?: string;
    /**
     * 
     * @type {string}
     * @memberof TestCaseResult
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof TestCaseResult
     */
    updated_at?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TestCaseResultStatusEnum {
    Waiting = 'waiting',
    Running = 'running',
    Passed = 'passed',
    Failed = 'failed',
    Skipped = 'skipped'
}

/**
 * 
 * @export
 * @interface TestPlan
 */
export interface TestPlan {
    /**
     * 
     * @type {number}
     * @memberof TestPlan
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TestPlan
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface TestPlanCapabilityResult
 */
export interface TestPlanCapabilityResult {
    /**
     * 
     * @type {number}
     * @memberof TestPlanCapabilityResult
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TestPlanCapabilityResult
     */
    status?: TestPlanCapabilityResultStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof TestPlanCapabilityResult
     */
    duration?: number;
    /**
     * 
     * @type {string}
     * @memberof TestPlanCapabilityResult
     */
    started_at?: string;
    /**
     * 
     * @type {string}
     * @memberof TestPlanCapabilityResult
     */
    finished_at?: string;
    /**
     * 
     * @type {string}
     * @memberof TestPlanCapabilityResult
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof TestPlanCapabilityResult
     */
    updated_at?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TestPlanCapabilityResultStatusEnum {
    Waiting = 'waiting',
    Running = 'running',
    Passed = 'passed',
    Failed = 'failed',
    Skipped = 'skipped'
}

/**
 * 
 * @export
 * @interface TestPlanResult
 */
export interface TestPlanResult {
    /**
     * 
     * @type {number}
     * @memberof TestPlanResult
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TestPlanResult
     */
    status?: TestPlanResultStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof TestPlanResult
     */
    duration?: number;
    /**
     * 
     * @type {string}
     * @memberof TestPlanResult
     */
    started_at?: string;
    /**
     * 
     * @type {string}
     * @memberof TestPlanResult
     */
    finished_at?: string;
    /**
     * 
     * @type {string}
     * @memberof TestPlanResult
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof TestPlanResult
     */
    updated_at?: string;
    /**
     * 
     * @type {InlineResponse200TestPlan}
     * @memberof TestPlanResult
     */
    test_plan?: InlineResponse200TestPlan;
}

/**
    * @export
    * @enum {string}
    */
export enum TestPlanResultStatusEnum {
    Waiting = 'waiting',
    Running = 'running',
    Passed = 'passed',
    Failed = 'failed',
    Skipped = 'skipped'
}


/**
 * ResultApi - axios parameter creator
 * @export
 */
export const ResultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # List results The same content as listed on https://app.autify.com/projects/{project_id}/results will be returned. 
         * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/results&#x60; 
         * @param {number} [page] The number of page returns.
         * @param {number} [perPage] The number of items returns. Default number is 30 and up to a maximum of 100
         * @param {number} [testPlanId] Test plan ID used to filter results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdResultsGet: async (projectId: number, page?: number, perPage?: number, testPlanId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectsProjectIdResultsGet', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}/results`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (testPlanId !== undefined) {
                localVarQueryParameter['test_plan_id'] = testPlanId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # Get a result The same content as shown on https://app.autify.com/projects/{project_id}/results/{id} will be returned. 
         * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/results/4&#x60; 
         * @param {number} id For example, the &#x60;{id}&#x60; for the following URL is **4**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/results/4&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdResultsIdGet: async (projectId: number, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectsProjectIdResultsIdGet', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsProjectIdResultsIdGet', 'id', id)
            const localVarPath = `/projects/{project_id}/results/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResultApi - functional programming interface
 * @export
 */
export const ResultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResultApiAxiosParamCreator(configuration)
    return {
        /**
         * # List results The same content as listed on https://app.autify.com/projects/{project_id}/results will be returned. 
         * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/results&#x60; 
         * @param {number} [page] The number of page returns.
         * @param {number} [perPage] The number of items returns. Default number is 30 and up to a maximum of 100
         * @param {number} [testPlanId] Test plan ID used to filter results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsProjectIdResultsGet(projectId: number, page?: number, perPage?: number, testPlanId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TestPlanResult>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsProjectIdResultsGet(projectId, page, perPage, testPlanId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * # Get a result The same content as shown on https://app.autify.com/projects/{project_id}/results/{id} will be returned. 
         * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/results/4&#x60; 
         * @param {number} id For example, the &#x60;{id}&#x60; for the following URL is **4**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/results/4&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsProjectIdResultsIdGet(projectId: number, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsProjectIdResultsIdGet(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResultApi - factory interface
 * @export
 */
export const ResultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResultApiFp(configuration)
    return {
        /**
         * # List results The same content as listed on https://app.autify.com/projects/{project_id}/results will be returned. 
         * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/results&#x60; 
         * @param {number} [page] The number of page returns.
         * @param {number} [perPage] The number of items returns. Default number is 30 and up to a maximum of 100
         * @param {number} [testPlanId] Test plan ID used to filter results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdResultsGet(projectId: number, page?: number, perPage?: number, testPlanId?: number, options?: any): AxiosPromise<Array<TestPlanResult>> {
            return localVarFp.projectsProjectIdResultsGet(projectId, page, perPage, testPlanId, options).then((request) => request(axios, basePath));
        },
        /**
         * # Get a result The same content as shown on https://app.autify.com/projects/{project_id}/results/{id} will be returned. 
         * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/results/4&#x60; 
         * @param {number} id For example, the &#x60;{id}&#x60; for the following URL is **4**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/results/4&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdResultsIdGet(projectId: number, id: number, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.projectsProjectIdResultsIdGet(projectId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResultApi - object-oriented interface
 * @export
 * @class ResultApi
 * @extends {BaseAPI}
 */
export class ResultApi extends BaseAPI {
    /**
     * # List results The same content as listed on https://app.autify.com/projects/{project_id}/results will be returned. 
     * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/results&#x60; 
     * @param {number} [page] The number of page returns.
     * @param {number} [perPage] The number of items returns. Default number is 30 and up to a maximum of 100
     * @param {number} [testPlanId] Test plan ID used to filter results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApi
     */
    public projectsProjectIdResultsGet(projectId: number, page?: number, perPage?: number, testPlanId?: number, options?: any) {
        return ResultApiFp(this.configuration).projectsProjectIdResultsGet(projectId, page, perPage, testPlanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # Get a result The same content as shown on https://app.autify.com/projects/{project_id}/results/{id} will be returned. 
     * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/results/4&#x60; 
     * @param {number} id For example, the &#x60;{id}&#x60; for the following URL is **4**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/results/4&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResultApi
     */
    public projectsProjectIdResultsIdGet(projectId: number, id: number, options?: any) {
        return ResultApiFp(this.configuration).projectsProjectIdResultsIdGet(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ScenarioApi - axios parameter creator
 * @export
 */
export const ScenarioApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # List scenarios 
         * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/scenarios&#x60; 
         * @param {number} [page] The number of page returns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdScenariosGet: async (projectId: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectsProjectIdScenariosGet', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}/scenarios`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # Get a scenario 
         * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/scenarios/2&#x60; 
         * @param {number} id For example, the &#x60;{id}&#x60; for the following URL is **2**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/scenarios/2&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdScenariosIdGet: async (projectId: number, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectsProjectIdScenariosIdGet', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsProjectIdScenariosIdGet', 'id', id)
            const localVarPath = `/projects/{project_id}/scenarios/{id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScenarioApi - functional programming interface
 * @export
 */
export const ScenarioApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScenarioApiAxiosParamCreator(configuration)
    return {
        /**
         * # List scenarios 
         * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/scenarios&#x60; 
         * @param {number} [page] The number of page returns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsProjectIdScenariosGet(projectId: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Story>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsProjectIdScenariosGet(projectId, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * # Get a scenario 
         * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/scenarios/2&#x60; 
         * @param {number} id For example, the &#x60;{id}&#x60; for the following URL is **2**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/scenarios/2&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsProjectIdScenariosIdGet(projectId: number, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Story>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsProjectIdScenariosIdGet(projectId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScenarioApi - factory interface
 * @export
 */
export const ScenarioApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScenarioApiFp(configuration)
    return {
        /**
         * # List scenarios 
         * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/scenarios&#x60; 
         * @param {number} [page] The number of page returns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdScenariosGet(projectId: number, page?: number, options?: any): AxiosPromise<Array<Story>> {
            return localVarFp.projectsProjectIdScenariosGet(projectId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * # Get a scenario 
         * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/scenarios/2&#x60; 
         * @param {number} id For example, the &#x60;{id}&#x60; for the following URL is **2**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/scenarios/2&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdScenariosIdGet(projectId: number, id: number, options?: any): AxiosPromise<Story> {
            return localVarFp.projectsProjectIdScenariosIdGet(projectId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScenarioApi - object-oriented interface
 * @export
 * @class ScenarioApi
 * @extends {BaseAPI}
 */
export class ScenarioApi extends BaseAPI {
    /**
     * # List scenarios 
     * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/scenarios&#x60; 
     * @param {number} [page] The number of page returns.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    public projectsProjectIdScenariosGet(projectId: number, page?: number, options?: any) {
        return ScenarioApiFp(this.configuration).projectsProjectIdScenariosGet(projectId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # Get a scenario 
     * @param {number} projectId For example, the &#x60;{project_id}&#x60; for the following URL is **1**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/scenarios/2&#x60; 
     * @param {number} id For example, the &#x60;{id}&#x60; for the following URL is **2**.&lt;br/&gt; &#x60;https://app.autify.com/projects/1/scenarios/2&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    public projectsProjectIdScenariosIdGet(projectId: number, id: number, options?: any) {
        return ScenarioApiFp(this.configuration).projectsProjectIdScenariosIdGet(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ScheduleApi - axios parameter creator
 * @export
 */
export const ScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * _Note: the Schedule is the TestPlan now._<br/><br/> In order to request executing the test plan `https://app.autify.com/projects/1/test_plans/3` , specify the following URL for API call `https://app.autify.com/api/v1/schedules/3` .<br/><br/> # Run TestPlan 
         * @param {number} id For example, the &#x60;{id}&#x60; for the following URL is **3**. &#x60;https://app.autify.com/projects/1/test_plans/3&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesIdPost: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('schedulesIdPost', 'id', id)
            const localVarPath = `/schedules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleApi - functional programming interface
 * @export
 */
export const ScheduleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleApiAxiosParamCreator(configuration)
    return {
        /**
         * _Note: the Schedule is the TestPlan now._<br/><br/> In order to request executing the test plan `https://app.autify.com/projects/1/test_plans/3` , specify the following URL for API call `https://app.autify.com/api/v1/schedules/3` .<br/><br/> # Run TestPlan 
         * @param {number} id For example, the &#x60;{id}&#x60; for the following URL is **3**. &#x60;https://app.autify.com/projects/1/test_plans/3&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schedulesIdPost(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TestPlanResult>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schedulesIdPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScheduleApi - factory interface
 * @export
 */
export const ScheduleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleApiFp(configuration)
    return {
        /**
         * _Note: the Schedule is the TestPlan now._<br/><br/> In order to request executing the test plan `https://app.autify.com/projects/1/test_plans/3` , specify the following URL for API call `https://app.autify.com/api/v1/schedules/3` .<br/><br/> # Run TestPlan 
         * @param {number} id For example, the &#x60;{id}&#x60; for the following URL is **3**. &#x60;https://app.autify.com/projects/1/test_plans/3&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesIdPost(id: number, options?: any): AxiosPromise<Array<TestPlanResult>> {
            return localVarFp.schedulesIdPost(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
export class ScheduleApi extends BaseAPI {
    /**
     * _Note: the Schedule is the TestPlan now._<br/><br/> In order to request executing the test plan `https://app.autify.com/projects/1/test_plans/3` , specify the following URL for API call `https://app.autify.com/api/v1/schedules/3` .<br/><br/> # Run TestPlan 
     * @param {number} id For example, the &#x60;{id}&#x60; for the following URL is **3**. &#x60;https://app.autify.com/projects/1/test_plans/3&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public schedulesIdPost(id: number, options?: any) {
        return ScheduleApiFp(this.configuration).schedulesIdPost(id, options).then((request) => request(this.axios, this.basePath));
    }
}


